// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Hypar.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace DynamoChallenge2
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class DynamoChallenge2Inputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public DynamoChallenge2Inputs(double @extrusionHeight, ShapeParameters @shapeParameters, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<DynamoChallenge2Inputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @extrusionHeight, @shapeParameters});
            }
        
            this.ExtrusionHeight = @extrusionHeight;
            this.ShapeParameters = @shapeParameters;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Extrusion Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-0.1D, 0.1D)]
        public double ExtrusionHeight { get; set; } = 0.05D;
    
        [Newtonsoft.Json.JsonProperty("Shape Parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShapeParameters ShapeParameters { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class ShapeParameters 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public ShapeParameters(double @a, double @b, double @c, double @d, double @e, double @f, double @g, double @h)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<ShapeParameters>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @a, @b, @c, @d, @e, @f, @g, @h});
            }
        
            this.A = @a;
            this.B = @b;
            this.C = @c;
            this.D = @d;
            this.E = @e;
            this.F = @f;
            this.G = @g;
            this.H = @h;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("A", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.01D, 0.4D)]
        public double A { get; set; } = 0.2961D;
    
        [Newtonsoft.Json.JsonProperty("B", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.01D, 0.3D)]
        public double B { get; set; } = 0.044D;
    
        [Newtonsoft.Json.JsonProperty("C", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.01D, 0.3D)]
        public double C { get; set; } = 0.072D;
    
        [Newtonsoft.Json.JsonProperty("D", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.01D, 0.3D)]
        public double D { get; set; } = 0.123D;
    
        [Newtonsoft.Json.JsonProperty("E", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.01D, 0.3D)]
        public double E { get; set; } = 0.029D;
    
        [Newtonsoft.Json.JsonProperty("F", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.01D, 0.3D)]
        public double F { get; set; } = 0.036D;
    
        [Newtonsoft.Json.JsonProperty("G", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.01D, 0.3D)]
        public double G { get; set; } = 0.149D;
    
        [Newtonsoft.Json.JsonProperty("H", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.01D, 0.07D)]
        public double H { get; set; } = 0.04D;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }
}